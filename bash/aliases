# file system stuff
alias ls="ls -FhG"
alias ll="ls -AlG"
alias l="ls -AFG"
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../../'
alias .....='cd ../../../../'

# important stuff
alias e='subl .'
alias r!="source ~/.bash_profile"
alias configs="c config_files"
alias changeset="~/code/config_files/changeset.rb"

# screen replacement stuff
alias tu="tmux"
alias tua="tmux attach -t"
alias tun="tmux new -s"
alias tus="tmux switch-client -t"

# rails stuff
alias migrate="rake db:migrate"
alias remigrate="rake db:migrate && rake db:migrate:redo"
alias tlog='tail -f log/development.log'
alias bi='bundle install --binstubs=, --path=.bundle/gems'
alias bu='bundle update'
alias be='bundle exec'
alias ms="rails db:migrate db:seed"

# git stuff
alias gadd="git add -u && git add . && git status"
alias gi="gem install"
alias gs="git s"
alias gap="git ap"
alias ga="git a"
alias gst="git st"
alias gb="git b"
alias gbb="git bb"
alias gc="git c"
alias gci="git ci"
alias gca="git ca"
alias gsc="git sc"
alias gcln="git clean -fd"
alias gcnv="git cnv"
alias gcm="git co master"
alias gcd="git co develop"
alias gd="git d"
alias gdc="git dc"
alias gpl="git pl"
alias gps="git ps"
alias gr="git r"
alias gg="git g"
alias gt="git t"
alias gbs="git bs"
alias grb="git rb"
alias grc="git rc"
alias gra="git ra"
alias grs="git rs"
alias gri="git ri"
alias gf="git f"
alias gup="git up"
alias gm="git merge"
alias gmm="git merge master"
alias gmd="git merge develop"
alias gsh="git sh"
alias gsu="git su"
alias zom="git sck | cut -f3 -d' ' | xargs -n 1 git log -n 1 --pretty=oneline"
alias sta="git stash"
alias uns="git stash pop"

# rails stuff
alias r="rails"
alias rc="rails c"
alias rs="rails s"
alias rgn="rails g"

# yarn stuff
alias yi="yarn install"
alias ya="yarn add"
alias yad="yarn add --dev"
alias yr="yarn remove"
alias yu="yarn upgrade"

# functions
g() {
  if [[ $# == '0' ]]; then
    git s
  else
    git "$@"
  fi
}

gpo() {
  if [[ $# == '0' ]]; then
    gpl origin develop
  else
    gpl origin "$@"
  fi
}

cpb() {
  if type "$1" &> /dev/null; then\
    changeset $1 | pbcopy
  else
    changeset develop | pbcopy
  fi
}

c() {
  cd ~/code/$1;
}

gau() {
  g | grep "UU" | xargs -n2 echo | sed 's/UU//' | xargs -n1 git add
}

gpr() {
  originurl=$(git config --get remote.origin.url)
  originurl=${originurl/git\@github\.com\:/https://github.com/}
  originurl=${originurl/\git:/https:}
  originurl=${originurl/\.git/}
  branchName=$(git rev-parse --abbrev-ref HEAD)

  if [ $# -eq 0 ]; then
    giturl=$originurl"/compare/"$branchName"?expand=1"
  else
    giturl=$originurl"/compare/"$1"..."$branchName"?expand=1"
  fi

  open $giturl
}

gbr() {
  originurl=$(git config --get remote.origin.url | tr '[:upper:]' '[:lower:]')
  originurl=${originurl/git\@bitbucket\.org\:/https://bitbucket.org/}
  originurl=${originurl/\git:/https:}
  originurl=${originurl/\.git/}

  path=$(git config --get remote.origin.url | tr '[:upper:]' '[:lower:]' | sed -e 's/git@bitbucket.org://')

  branchName=$(git rev-parse --abbrev-ref HEAD)
  giturl=$originurl"/pull-request/new?source="$path"::"$branchName

  open $giturl
}

gbc() {
  git branch -v | grep "gone" | cut -c 3- | awk '$3 { print $1 }' | xargs -n 1 git branch -D
}

grn() {
  git branch -m $1 $2
  git push origin :$1
  git push --set-upstream origin $2
}

rename_batch() {
  ls | sed -e "p;s/$1/$2/g" | xargs -n2 mv
}

imgalpha() {
  pngquant=/Applications/ImageAlpha.app/Contents/MacOS/pngquant

  if ! exists $pngquant; then
    echo "ImageAlpha not installed"
    return
  fi

  if ! [[ "$#" -eq 2 ]]; then
    echo 'ImageAlpha needs params'
    return
  fi

  $pngquant $2 $1/*png --ext .png --force
}

has_pngs() {
  if [[ $(ls -A | grep *png) ]]; then
    return 0
  else
    return 1
  fi
}

grep4() {
  sed -n '
  '/$1/' !{;H;x;s/^.*\n\(.*\n.*\)$/\1/;x;}
  '/$1/' {;H;n;H;x;p;a\
  ---
  }'
}

space() {
  if hash gsort 2>/dev/null; then
    du -hs * | gsort -hr
  else
    du -k * | sort -nr | cut -f2 | xargs du -sh
  fi
}

exists() {
  if type "$1" &> /dev/null; then\
    return 0
  else
    return 1
  fi
}
